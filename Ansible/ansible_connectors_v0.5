# ----- consts à ajouter dans default w/ Ansible ---------

# opencti_dir
opencti_dir="/opt/opencti"

# connecteurrs -- voir dans prod.json la structure / VOIR LE PORT AVEC GEOFFREY POUR opencti (j'ai mis celui par défault dans la doc (4000))

opencti_connector_dir="${opencti_dir}/connectors"
opencti_url="http://localhost:4000"
opencti_token=$(grep token ${opencti_dir}/config/production.json | cut -d\" -f4)



# ----connecteurs script à push via Ansible w/ py3 biblio------

# 1=actif | 0=inactif

declare -A CONNECTORS;
CONNECTORS['alienvault']=0
CONNECTORS['amitt']=0
CONNECTORS['crowdstrike']=0
CONNECTORS['cryptolaemus']=0
CONNECTORS['cve']=1
CONNECTORS['cyber-threat-coalition']=0
CONNECTORS['cybercrime-tracker']=0
CONNECTORS['export-file-csv']=1
CONNECTORS['export-file-stix']=1
CONNECTORS['hygiene']=0
CONNECTORS['import-file-pdf-observables']=1
CONNECTORS['import-file-stix']=1
CONNECTORS['ipinfo']=0
CONNECTORS['lastinfosec']=0
CONNECTORS['malpedia']=0
CONNECTORS['misp']=1
CONNECTORS['mitre']=1
CONNECTORS['opencti']=1
CONNECTORS['valhalla']=0
CONNECTORS['virustotal']=1

echo "Les connecteurs vont etre installes :"

for i in "${!CONNECTORS[@]}"
	do
		if [[ ${CONNECTORS[$i]} == 1 ]]
			then
				echo $i
		fi
	done

echo
read -p "Vous etes sur de vouloir installer ces connecteurs ? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		echo 'Retour. Annulation par utilisateur.'
	    exit 1
fi 

# ------ INSTALL DES CONNECTEURS SELECTIONNES DANS SCRIPT, A VARIABILISER (peut etre une entrée clavier?) ---------

for i in "${!CONNECTORS[@]}"
	do
		if [[ ${CONNECTORS[$i]} == 1 ]]
			then
				python${python_ver} -m pip -q install -r ${opencti_connector_dir}/$i/src/requirements.txt

				if [[ -f "${opencti_connector_dir}/$i/src/config.yml" ]]
					then
						sed -i"" -e "s=http://localhost:8080=${opencti_url}=g" "${opencti_connector_dir}/$i/src/config.yml"
						sed -i"" -e "s/token: 'ChangeMe'/token: '${opencti_token}'/g" "${opencti_connector_dir}/$i/src/config.yml"
						sed -i"" -e "s/id: 'ChangeMe'/id: '$(grep id: ${opencti_connector_dir}/$i/src/config.yml | cut -d\' -f2)'/g" "${opencti_connector_dir}/$i/src/config.yml"
				else
					cp "${opencti_connector_dir}/$i/src/config.yml.sample" "${opencti_connector_dir}/$i/src/config.yml"
					sed -i"" -e "s=http://localhost:8080=${opencti_url}=g" "${opencti_connector_dir}/$i/src/config.yml"
					sed -i"" -e "s/token: 'ChangeMe'/token: '${opencti_token}'/g" "${opencti_connector_dir}/$i/src/config.yml"
					sed -i"" -e "s/id: 'ChangeMe'/id: '$(uuidgen -r | tr -d '\n' | tr '[:upper:]' '[:lower:]')'/g" "${opencti_connector_dir}/$i/src/config.yml"
				fi

# ----- pour un service fonctionnel avec les bons chemins du systemctl correspondants -------

				if [[ ! -f "/etc/systemd/system/opencti-connector-$i.service" ]]
					then
						cat <<-EOT > /etc/systemd/system/opencti-connector-$i.service
						[Unit]
						Description=OpenCTI Connector - $i
						After=network.target
						[Service]
						Type=simple
						WorkingDirectory=${opencti_connector_dir}/$i/src
						ExecStart=/usr/bin/python${python_ver} "${opencti_connector_dir}/$i/src/$i.py"
						ExecReload=/bin/kill -s HUP \$MAINPID
						ExecStop=/bin/kill -s TERM \$MAINPID
						PrivateTmp=true
						Restart=always
						[Install]
						WantedBy=multi-user.target
						EOT
				fi

#------- au cas ou le service est déjà actif, le remédarre ----------

				if [[ $(systemctl status --no-pager opencti-connector-$i.service | grep 'Active: active') ]]
					then
						echo "opencti-connector-$i.service is already running, restarting due to config changes!"
						systemctl restart opencti-connector-$i.service
				fi

				quit_on_error "Install le service correspondant a : $i"
		fi
	done

echo -e "\nTermine.\n"
systemctl daemon-reload
